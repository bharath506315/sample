{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convert","event","setState","f","state","data","tempInC","tempInF","_this2","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","fetch","concat","then","response","json","resData","main","temp","Math","round","react_default","a","createElement","className","name","weather","description","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yNA2FeA,qBAtFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAyBRQ,QAAU,SAAAC,GACRR,EAAKS,SAAS,CACZC,GAAIV,EAAKW,MAAMD,KA1BjBV,EAAKW,MAAQ,CACXD,GAAG,EACHE,KAAM,GACNC,QAAS,GACTC,QAAS,IANMd,mFASC,IAAAe,EAAAZ,KAClBa,UAAUC,YAAYC,mBAAmB,SAAAC,GACvC,IAAIC,EAAMD,EAASE,OAAOC,SACtBC,EAAMJ,EAASE,OAAOG,UAC1BC,MAAK,qDAAAC,OACkDN,EADlD,SAAAM,OAC6DH,IAE/DI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAO,OACXf,EAAKN,SAAS,CACZG,KAAMkB,EACNjB,QAASiB,EAAQC,KAAKC,KAAO,KAC7BlB,QAASmB,KAAKC,MAA2B,EAApBJ,EAAQC,KAAKC,KAAY,EAAI,IAAM,4CAWhE,IAAMrB,EAAQR,KAAKQ,MACnB,OACEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,sBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAa3B,EAAMC,KAAK2B,SAI3CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACV3B,EAAMC,MAAQT,KAAKQ,MAAMD,EAAIC,EAAME,QAAUF,EAAMG,YAK5DqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACV3B,EAAMC,KAAOD,EAAMC,KAAK4B,QAAQ,GAAGC,YAAc,QAM5DN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iCACVI,QAASvC,KAAKI,SAEbJ,KAAKQ,MAAMD,EAAI,IAAM,MAG1ByB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAhFPK,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBrC,WACrBA,UAAUsC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.5519c28d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      f: true,\n      data: \"\",\n      tempInC: \"\",\n      tempInF: \"\"\n    };\n  }\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      fetch(\n        `https://fcc-weather-api.glitch.me/api/current?lat=${lat}&lon=${lon}`\n      )\n        .then(response => response.json())\n        .then(resData =>\n          this.setState({\n            data: resData,\n            tempInC: resData.main.temp + \" C\",\n            tempInF: Math.round((resData.main.temp * 9) / 5 + 32) + \" F\"\n          })\n        );\n    });\n  }\n  convert = event => {\n    this.setState({\n      f: !this.state.f\n    });\n  };\n  render() {\n    const state = this.state;\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4 text-center\">Local Weather App</h1>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <div className=\"card\">\n              <div className=\"card-body text-center\">\n                <h5 className=\"card-title\">Name</h5>\n                <p className=\"card-text\">{state.data.name}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"card\">\n              <div className=\"card-body text-center\">\n                <h5 className=\"card-title\">temperature</h5>\n                <p className=\"card-text\">\n                  {state.data && this.state.f ? state.tempInC : state.tempInF}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"card\">\n              <div className=\"card-body text-center\">\n                <h5 className=\"card-title\">Description</h5>\n                <p className=\"card-text\">\n                  {state.data ? state.data.weather[0].description : \"\"}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-md-4\" />\n          <div className=\"col-md-4 text-center\">\n            <button\n              className=\"btn btn-outline-primary btn-lg\"\n              onClick={this.convert}\n            >\n              {this.state.f ? \"F\" : \"C\"}\n            </button>\n          </div>\n          <div className=\"col-md-4\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}